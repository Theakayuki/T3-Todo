import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import Button from "~/components/Button";
import { api, type RouterOutputs } from "~/utils/api";

type Todo = RouterOutputs["todo"]["getAll"][number];

dayjs.extend(relativeTime);

const Home: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: todos } = api.todo.getAll.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-gradient-to-b from-amber-300 via-rose-600 to-rose-800 dark:from-sky-900 dark:from-10% dark:via-slate-800 dark:via-30% dark:to-slate-950 dark:to-35%">
        <div className="mx-auto flex min-h-screen max-w-2xl flex-col content-center">
          <AuthShowcase />
          {sessionData?.user && <TodoForm />}
          {sessionData?.user &&
            todos?.map((todo) => <TodoView key={todo.id} {...todo} />)}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.todo.getSecretMessage.useQuery(
    undefined,
    {
      enabled: !!sessionData?.user,
      refetchOnWindowFocus: false,
    }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4 px-4">
      <p className="text-center text-2xl text-orange-950">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <Button
        className=""
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </Button>
    </div>
  );
};

const TodoForm: React.FC = () => {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const trpc = api.useContext();
  const { mutateAsync: createTodo } = api.todo.createPost.useMutation({
    onSettled: async () => {
      await trpc.todo.getAll.invalidate();
    },
  });

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    try {
      await createTodo({
        title,
        content,
      });
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <form
      onSubmit={(event) => void handleSubmit(event)}
      className="mx-12 my-8 flex flex-col justify-center space-y-4"
    >
      <input
        className="w-full rounded-md border border-white/20 px-4 py-2"
        placeholder="Title"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
      />
      <textarea
        className="w-full rounded-md border border-white/20 px-4 py-2"
        placeholder="Content"
        value={content}
        onChange={(e) => setContent(e.target.value)}
      />
      <Button
        className="bg-amber-200 transition hover:animate-bounce hover:bg-amber-100"
        type="submit"
      >
        Create
      </Button>
    </form>
  );
};

const TodoView: React.FC<Todo> = (todo) => {
  const trpc = api.useContext();
  const { mutate: deleteTodo } = api.todo.deletePost.useMutation({
    onSettled: async () => {
      await trpc.todo.getAll.invalidate();
    },
  });
  const { mutate: toggle } = api.todo.toggleCompleted.useMutation({
    onSettled: async () => {
      await trpc.todo.getAll.invalidate();
    },
  });
  const { title, content, userId, createdAt } = todo;

  const handleDelete = () => {
    deleteTodo(todo.id);
  };

  const handleToggle = () => {
    toggle({ id: todo.id, completed: !todo.completed });
  };

  return (
    <div className="m-8 rounded-md border border-white bg-white/75 p-4 text-center ">
      <h1>{title}</h1>
      <div className="flex flex-col text-left md:flex-row md:justify-between">
        <div>
          <p>{content}</p>
          <p>{userId}</p>
          <p>Created: {dayjs().to(createdAt)}</p>
        </div>
        <div className="flex items-center justify-evenly md:flex-col md:space-y-4">
          <label htmlFor="completed">Completed</label>
          <input
            type="checkbox"
            name="completed"
            id="completed"
            checked={todo.completed}
            onChange={handleToggle}
          />
          <button
            onClick={handleDelete}
            className="rounded-full bg-red-700 px-9 py-2 font-semibold text-white no-underline transition hover:bg-red-600"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
};
