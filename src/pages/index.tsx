import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { api, type RouterOutputs } from "~/utils/api";

type Todo = RouterOutputs["todo"]["getAll"][number];

dayjs.extend(relativeTime);

const Home: NextPage = () => {
  const { data: sessionData } = useSession();
  const { data: todos } = api.todo.getAll.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col bg-gradient-to-b from-[#2f026e] via-[#180137] to-[#15162c]">
        <AuthShowcase />
        {sessionData?.user && <TodoForm />}
        {sessionData?.user &&
          todos?.map((todo) => <TodoView key={todo.id} {...todo} />)}
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.todo.getSecretMessage.useQuery(
    undefined,
    {
      enabled: !!sessionData?.user,
      refetchOnWindowFocus: false,
    }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4 px-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const TodoForm: React.FC = () => {
  const { data: sessionData } = useSession();
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const { mutateAsync: createTodo } = api.todo.createPost.useMutation();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    await createTodo({ title, content });
    setTitle("");
    setContent("");
  };

  return (
    <form
      onSubmit={(event) => void handleSubmit(event)}
      className="my-8 flex flex-col justify-center space-y-4 px-8"
    >
      <input
        className="w-full rounded-md border border-white/20 px-4 py-2"
        placeholder="Title"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
      />
      <textarea
        className="w-full rounded-md border border-white/20 px-4 py-2"
        placeholder="Content"
        value={content}
        onChange={(e) => setContent(e.target.value)}
      />
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        type="submit"
      >
        Create
      </button>
    </form>
  );
};

const TodoView: React.FC<Todo> = (todo) => {
  const { title, content, userId, createdAt } = todo;
  return (
    <div className="m-8 rounded-md border border-white bg-white/75 p-4">
      <h1>{title}</h1>
      <p>{content}</p>
      <p>{userId}</p>
      <p>Created: {dayjs().to(createdAt)}</p>
    </div>
  );
};
